Integration of GPU into Postgres.

Some notes on current implementation (will be updated based on the process):
1. To let query execute on OpenCL supported devices, query need to be written with special keywords.
2. Query parser and optimizer are mostly unaware of the existing of OpenCL devices.

3. Currently only scan operation is supported. Other operations will be supported later.
4. For each query that will be executed on GPU, we will create a OpenCL context.
    (Alternative choice: we can also create on OpenCL context for each postgres process)
5. OpenCL memory management:
    1) total memory size
    For each query, we will allocate a special memory space to accomodate all the query needed data before
    transferred to GPU. Currently the size of the allocated memory for each query equals to the total size
    of data needed by the query (very inefficient).
    2) how to allocate memory
    Memory are allocated using CL_MEM_ALLOC_HOST_PTR. The place where the memory are allocated depends on
    OpenCL driver implementation (Intel and AMD in pinned host memory, Nvidia in GPU device memory).
    3) when to release
    all the opencl allocated memory will be released when query ends(ExecutorEnd())
6. We first assume that the output of a query only consists of simple attributes. Complex expressions will be supported later.
    the following postgresql expression type is supported:
        1) T_OpExpr, such as, id+1, where id is the name of a column.
        2) T_Var, a simple column as an expression.
        3) T_Const, a const value in an expression.
        4) T_Aggref, agggreation expression.
        5) T_TargetEntry, a target in the target list

7. where condition:
    currently we only consider simple expressions connected by "and" "or"
    funcExpr is not supported.
    variable length data is not handled yet (backend/utils/adt/datum.c).

8. Some query features are not supported yet. This includes:
    subquery, having clause, limit clause, common table expression,
    NULL attrs, toasted tuples

9. supported type:
    fixed length data:
        int4
        time stamp without time zone
        BpChar, with a fixed length of header
        numeric, the length is the scale and with a fixed length of header.

   variable length data: 
        varchar

There may be duplicated codes in the current implementation. we will keep refining the codes all the time.

Modified files:
Optimizer (only generating seq scan plan for regular table node):
    src/backend/optimizer/path/allpaths.c: set_plain_rel_pathlist()
    src/backend/optimizer/prep/joinpath.c: all_path_to_joinrel: when processing join on GPU, only generate nest loop plan. 
    src/backend/executor/execMain.c: ExecutorStart(), ExecutorRun(): setup OpenCL context, offload to GPU
    (Alternative choice: src/backend/tcop/postgres.c: PostgresMain: setup OpenCL context and intialize query description with it)
    src/backend/utils/cache/lsysca*.c: get_relnatts(): remove #ifdef to make the function visible
    src/backend/postmaster/postmaster.c: add support for process affinity
